{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>Unit tests are great for peace of mind and reducing software errors. You should always make the time to test.</p>"},{"location":"#types-of-testing","title":"Types of Testing","text":""},{"location":"#js-event-loop","title":"JS Event Loop","text":"<ul> <li>\u2728\u267b\ufe0f JavaScript Visualized: Event Loop</li> </ul>"},{"location":"#js-event-loop-reference","title":"JS Event Loop Reference","text":"<ul> <li>Youtube: JavaScript Visualized - Event Loop, Web APIs, (Micro)task Queue</li> <li>Dev.to Blog: JavaScript Visualized: Event Loop </li> <li>Source: JavaScript Visualized: Event Loop, Web APIs, (Micro)task Queue</li> </ul>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Top 11 JavaScript Testing Frameworks: Everything You Need to Know</li> <li> <p>JavaScript unit testing frameworks in 2024: A comparison</p> </li> <li> <p>How to write your first unit test in JavaScript</p> </li> <li>JS Unit Testing Frameworks Comparison</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"testing/intro/","title":"Overview","text":""},{"location":"testing/intro/#testing","title":"Testing","text":"<p>Testing is a crucial part of web application development, ensuring your app works as expected, is reliable, and provides a good user experience. Since you\u2019ve built applications with JavaScript, React, and Next.js but haven\u2019t done testing yet, I\u2019ll walk you through the types of testing commonly used in web applications, explain where to start, and address whether you should test first or later.</p>"},{"location":"testing/intro/#types-of-testing-in-web-applications","title":"Types of Testing in Web Applications","text":"<p>Here\u2019s a breakdown of the main testing types you\u2019ll encounter:</p>"},{"location":"testing/intro/#1-unit-testing","title":"1. Unit Testing","text":"<ul> <li> <p>What it is: Tests individual functions, components, or modules in isolation (e.g., a React component or a utility function).</p> </li> <li> <p>Tools:</p> <ul> <li>Jest: A popular testing framework for JavaScript and React. It\u2019s often paired with React Testing Library.</li> <li>Vitest: A faster alternative to Jest, especially good with modern JS frameworks.</li> </ul> </li> <li> <p>When to use: For small, reusable pieces of code (e.g., a button component or a helper function).</p> </li> <li>Example: Testing if a function <code>add(2, 3)</code> returns <code>5</code>.</li> </ul> Example <ul> <li>What: Tests a single React component in isolation.</li> <li>Example: Testing a <code>Button</code> component.</li> <li>Tools: Jest + React Testing Library.</li> </ul> <pre><code>// Button.js\nexport const Button = ({ label, onClick }) =&gt; (\n    &lt;button onClick={onClick}&gt;{label}&lt;/button&gt;\n);\n\n// Button.test.js\nimport { render, screen, fireEvent } from \"@testing-library/react\";\nimport { Button } from \"./Button\";\n\ntest(\"renders button and handles click\", () =&gt; {\n    const handleClick = jest.fn(); // Mock function to track clicks\n    render(&lt;Button label=\"Click me\" onClick={handleClick} /&gt;);\n\n    const button = screen.getByText(\"Click me\");\n    expect(button).toBeInTheDocument(); // Check if it renders\n\n    fireEvent.click(button); // Simulate click\n    expect(handleClick).toHaveBeenCalledTimes(1); // Check if click handler works\n});\n</code></pre> <ul> <li>Run: <code>npx jest</code></li> </ul>"},{"location":"testing/types/","title":"Types","text":""}]}